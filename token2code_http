#!/usr/bin/python
#coding=utf-8 
import hmac, base64, struct, hashlib, time
import redis
import random
import time
from wsgiref.simple_server import make_server  

serverport = 8005
redis_host = 'localhost'
redis_port = '6379'
redis_db = '3'
rs = redis.StrictRedis(host=redis_host,port=redis_port,db=redis_db)
'''

root_*.*.*.*
get_m
user_m
unknow_get

'''
def Authenticator_token2c(token):
    input = int(time.time())//30
    key = base64.b32decode(token)
    msg = struct.pack(">Q", input)
    code = hmac.new(key, msg, hashlib.sha1).digest()
    o = ord(code[19]) & 15
    code = str((struct.unpack(">I", code[o:o+4])[0] & 0x7fffffff) % 1000000)
    if len(code) == 5:
        code = '0' + code
    return code

def inputname(in_user):
    #in_user = str(raw_input('user>>'))
    user = 'user_'+in_user
    get_user = 'get_'+in_user

    if rs.exists(user):
        vtime = str(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())))
        rs.sadd (get_user,vtime)
        retime = 'Server current time : '+ vtime
        ret = in_user+vtime +'</br>'
        for key in rs.smembers(user):
            try:
                re = 'key: '+key+' , Authenticator code: '+Authenticator_token2c(str(rs.get(key)))
            except Exception,e:
                re = 'key: '+key+'ERROR:',e.message
            ret = ret+re+'</br>'
    else :
        vtime = str(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())))
        msg = 'USER:'+in_user +',IN:'+ vtime
        rs.sadd ('unknow_get',msg)
        ret = 'user ' +in_user+ ' non-existent'
    return ret

def app(environ, start_response):  
    status = "200 OK"
    response_headers = [('Content-type', 'text/html')]
    start_response(status, response_headers)
    user = str(environ['PATH_INFO'][1:] or 'none')
    if user == 'none':
        return 'nouser'
    else:
        return inputname(user)
  
httpd = make_server('', serverport, app)  
print 'Serving on port '+ str(serverport) +'...'  
  
httpd.serve_forever()  
